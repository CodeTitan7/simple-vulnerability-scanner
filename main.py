import logging
from concurrent.futures import ThreadPoolExecutor
import json
from config import TARGET_URL
from scanners.sql_injection import scan_sql_injection
from scanners.xss import scan_xss
from scanners.csrf import scan_csrf
from scanners.directory_traversal import scan_directory_traversal
from scanners.command_injection import scan_command_injection
from utils.logger import setup_logging

setup_logging()

def web_vulnerability_scanner(url):
    print(f"Scanning {url} for vulnerabilities...\n")
    scan_results = {}
    with ThreadPoolExecutor(max_workers=5) as executor:
        futures = {
            executor.submit(scan_sql_injection, url): "SQL Injection",
            executor.submit(scan_xss, url): "XSS",
            executor.submit(scan_csrf, url): "CSRF",
            executor.submit(scan_directory_traversal, url): "Directory Traversal",
            executor.submit(scan_command_injection, url): "Command Injection"
        }
        for future in futures:
            vulnerability = futures[future]
            try:
                if future.result():
                    print(f"Potential {vulnerability} vulnerability found.")
                    scan_results[vulnerability] = "Found"
                else:
                    print(f"No {vulnerability} vulnerability found.")
                    scan_results[vulnerability] = "Not Found"
            except Exception as e:
                print(f"[ERROR] Scanning for {vulnerability} failed: {e}")
                logging.error(f"Scanning for {vulnerability} failed: {e}")
    with open('vulnerability_scan_results.json', 'w') as result_file:
        json.dump(scan_results, result_file, indent=4)

if __name__ == "__main__":
    web_vulnerability_scanner(TARGET_URL)